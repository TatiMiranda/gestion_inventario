generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  nombre      String
  email       String       @unique
  password    String
  createdAt   DateTime     @default(now())
  
  // RelaciÃ³n inversa con Assignment
  assignments Assignment[]
}


model Categoria {
  id        Int      @id @default(autoincrement())
  nombre    String   @unique
  equipos  Equipo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones inversas
  items     Item[]
}

model Item {
  id          Int          @id @default(autoincrement())
  nombre      String
  categoriaId Int
  categoria   Categoria    @relation(fields: [categoriaId], references: [id])
  
  // RelaciÃ³n inversa con Assignment
  assignments Assignment[]
}


model Assignment {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  item       Item     @relation(fields: [itemId], references: [id])
  itemId     Int
  assignedAt DateTime @default(now())
  returnedAt DateTime?
}

model Equipo {
  id          Int        @id @default(autoincrement())
  nombre      String
  codigo      String     @unique
  categoriaId Int?
  categoria   Categoria? @relation(fields: [categoriaId], references: [id])
  updatedAt   DateTime   @updatedAt
  estado      String     @default("Activo")  // ðŸ‘ˆ Nuevo campo
  stock       Stock?
}


model Stock {
  id        Int     @id @default(autoincrement())
  equipoId  Int     @unique
  cantidad  Int     @default(1)
  equipo    Equipo  @relation(fields: [equipoId], references: [id])
}


enum Role {
  ADMIN
  SUPERVISOR
  AGENT
}

enum ItemStatus {
  ACTIVE
  IN_REPAIR
  RETIRED
}
